#include <HID-Project.h>
#include <Key.h>
#include <Keypad.h>
#include <Bounce2.h>
#include <Encoder.h>        //http://www.pjrc.com/teensy/td_libs_Encoder.html
/**
 * 
 * 
This is a compliation of code from:
FrankLumien's Micro USB Media controller (Arduino Pro Micro): https://www.thingiverse.com/thing:2967216
Alexander Brevig custom Keypad Example: https://codebender.cc/example/Keypad/CustomKeypad#CustomKeypad.ino
Media Controller by Haid

Set Board to: Arduinio Leonardo

               Pro Micro Pinout
                      ___
                  ___|   |___
                 |    ---    |
                 |* TX0  RAW*|
                 |* RX1  GND*| Ground (enc)
    Ground (but) |* GND  RST*|
                 |* GND  VCC*| VCC (enc)
       Media Next|* 2     A3*| Keypad Column 4
 Media Play/Pause|* 3     A2*| Keypad Column 3
   Media Previous|* 4     A1*| Keypad Column 2
                 |* 5     A0*| Keypad Column 1
        Encoder A|* 6     15*| Keypad Row 4
        Encoder B|* 7     14*| Keypad Row 3
                 |* 8     16*| Keypad Row 2
 Encoder SW/Mute |* 9     10*| Keypad Row 1               
                  -----------

/**
 * 
 */
 
const byte ROWS = 4; //four rows
const byte COLS = 4; //four columns
//define the symbols on the buttons of the keypads
char hexaKeys[ROWS][COLS] =
{
    {'a','e','j','o'},
    {'b','f','k','p'},
    {'c','g','l','q'},
    {'d','h','m','r'},
};

//set keypad pins
byte rowPins[ROWS] = {10, 16, 14, 15}; //connect to the row pinouts of the keypad
byte colPins[COLS] = {A0, A1, A2, A3}; //connect to the column pinouts of the keypad

// Set media control pin numbers. Other side of buttons (and pin 5 on encoder) are connected to GND.
const uint8_t previousPin = 4;     // the number of the pushbutton pin
const uint8_t playPausePin = 3;     // the number of the pushbutton pin
const uint8_t nextPin = 2;     // the number of the pushbutton pin
const uint8_t encA = 6;       // CLK on encoder
const uint8_t encB = 7;       // DT on encoder
const uint8_t mutePin = 9;   // SW on encoder

long oldPosition  = -999;
bool muteState = false;      // Remeber what state was the button last time

Encoder myEnc(encB, encA);

// Instantiate a Bounce object
Bounce muteButton = Bounce();
Bounce playPauseButton = Bounce();
Bounce nextButton = Bounce();
Bounce previousButton = Bounce();
Bounce volumeControl = Bounce();
// Debounce time in milliseconds
const unsigned long intervalMs = 15;


//initialize an instance of class NewKeypad
Keypad customKeypad = Keypad( makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS);

void setup() {
  // put your setup code here, to run once:
{
    Serial.begin(9600);
            
    // Setup the Bounce instance :
  pinMode(mutePin, INPUT_PULLUP);
  muteButton.attach(mutePin);
  muteButton.interval(intervalMs);

  pinMode(playPausePin, INPUT_PULLUP);
  playPauseButton.attach(playPausePin);
  playPauseButton.interval(intervalMs);

  pinMode(nextPin, INPUT_PULLUP);
  nextButton.attach(nextPin);
  nextButton.interval(intervalMs);

  pinMode(previousPin, INPUT_PULLUP);
  previousButton.attach(previousPin);
  previousButton.interval(intervalMs);
}

}

void loop() {
  // put your main code here, to run repeatedly:
  checkVolumeControl();
  checkMuteButton();
  checkPlayPauseButton();
  checkNextButton();
  checkPreviousButton();
  checkKeypad(); 
    
}
//----------------------------------------------------------------
void checkPreviousButton() {
  previousButton.update();
  const byte buttonState = previousButton.read();
  if (buttonState == LOW && previousButton.fallingEdge()) {
    Serial.print("Previous");
    Consumer.write(MEDIA_PREVIOUS);
  }
}
//----------------------------------------------------------------
void checkNextButton() {
  nextButton.update();
  const byte buttonState = nextButton.read();
  if (buttonState == LOW && nextButton.fallingEdge()) {
    Serial.print("Next");
    Consumer.write(MEDIA_NEXT);
  }
}
//----------------------------------------------------------------
void checkPlayPauseButton() {
  playPauseButton.update();
  const byte buttonState = playPauseButton.read();
  if (buttonState == LOW && playPauseButton.fallingEdge()) {
    Serial.print("PlayPause");
    Consumer.write(MEDIA_PLAY_PAUSE);
  }
}
//----------------------------------------------------------------
void checkMuteButton() {
  muteButton.update();
  const byte buttonState = muteButton.read();
  if (buttonState == LOW && muteButton.fallingEdge()) {
    Serial.print("mute");
   Consumer.write(MEDIA_VOLUME_MUTE);
    if (!muteState) {
      muteState = true;
          } else {
      muteState = false;
          }
  }
}
//----------------------------------------------------------------
void checkVolumeControl() {
  const long newPosition = myEnc.read();
  if (newPosition != oldPosition) {
    if (newPosition > oldPosition) {
    
     Consumer.write(MEDIA_VOLUME_UP);
    } else {
      Serial.print("down");
      Consumer.write(MEDIA_VOLUME_DOWN);
    }
    oldPosition = newPosition;
    muteState = false;
    Serial.println();
  }
}
void checkKeypad() {
  char customKey = customKeypad.getKey();

    if (customKey)
    { 
        Serial.println(customKey);
        Serial.write(customKey);
        Keyboard.press(KEY_LEFT_ALT);
        Keyboard.press(KEY_RIGHT_CTRL);
        Keyboard.write( customKey );
        Keyboard.release(KEY_LEFT_ALT);
        Keyboard.release(KEY_RIGHT_CTRL);
                
    }
 }
